{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","className","s","statusText","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","statusInput","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","offEditMode","profile","error","info","onSubmit","infoBlock","title","createField","Input","Textarea","Object","keys","contacts","map","key","contact","formSummaryError","editProfileBtn","type","editProfileBtnCancel","onClick","ProfileData","isOwner","goToEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","ProfileInfo","Preloader","avatar","main","profilePhoto","src","photos","large","userPhoto","alt","htmlFor","chooseFile","chooseBase","target","files","length","savePhoto","id","initialValues","formData","saveProfile","then","Post","item","message","likeCount","MyPosts","React","memo","postsElements","posts","p","post","likesCount","myPosts","AddNewPostForm","values","addPost","newPostBody","maxLength30","maxLengthCreator","myPost","Field","name","component","placeholder","textarea","validate","required","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","loggedUserId","putUserId","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","setUserProfile","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.7f3a07a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainimg\":\"ProfileInfo_mainimg__3VV6o\",\"item\":\"ProfileInfo_item__3Xkz7\",\"avatar\":\"ProfileInfo_avatar__1XxrF\",\"main\":\"ProfileInfo_main__2zhmf\",\"profilePhoto\":\"ProfileInfo_profilePhoto__3tqjv\",\"chooseFile\":\"ProfileInfo_chooseFile__3dVOu\",\"info\":\"ProfileInfo_info__N5QMX\",\"title\":\"ProfileInfo_title__1axYb\",\"statusInput\":\"ProfileInfo_statusInput__15yWZ\",\"statusText\":\"ProfileInfo_statusText__2UgT0\",\"chooseBase\":\"ProfileInfo_chooseBase__3reda\",\"contacts\":\"ProfileInfo_contacts__1-DYJ\",\"editProfileBtn\":\"ProfileInfo_editProfileBtn__2L9Wm\",\"editProfileBtnCancel\":\"ProfileInfo_editProfileBtnCancel__1i2oD\",\"animate1\":\"ProfileInfo_animate1__3TN4M\",\"animate2\":\"ProfileInfo_animate2__1osNZ\",\"animate3\":\"ProfileInfo_animate3__36p6f\",\"animate4\":\"ProfileInfo_animate4__LutIL\",\"formSummaryError\":\"ProfileInfo_formSummaryError__a4eYO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__2Frl-\",\"textarea\":\"MyPosts_textarea__20W2w\",\"myPost\":\"MyPosts_myPost__3X_sa\",\"posts\":\"MyPosts_posts__1rKi6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1SNgQ\"};","import React, { useState, useEffect } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div onDoubleClick={activateEditMode}>\r\n                    <p className={s.statusText}>{props.status || \"Empty\"}</p>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <textarea onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true} className={s.statusInput} value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import s from './ProfileInfo.module.css';\r\nimport { createField, Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { reduxForm } from 'redux-form';\r\n\r\nconst ProfileDataForm = ({ handleSubmit, offEditMode, profile, error }) => {\r\n\r\n    return <form className={s.info} onSubmit={handleSubmit}>\r\n        <div className={s.infoBlock}>\r\n            <p className={s.title}>Infoâ˜»</p>\r\n            <p>Name: {createField(\"Name\", \"fullName\", [], Input)}</p>\r\n            <p>About: <span>{createField(\"About me...\", \"aboutMe\", [], Textarea)}</span></p>\r\n            <p>Looking for a job: <span>{createField(\"\", \"lookingForAJob\", [], Input, \"checkbox\")}</span></p>\r\n            <p>My professional skills: <span>{createField(\"Type here mf...\", \"lookingForAJobDescription\", [], Textarea)}</span></p>\r\n        </div>\r\n        <div>\r\n            <p className={s.title}>Contactsâ˜»</p>{Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={s.contact}>\r\n                    <p>{key}: {createField(key, \"contacts.\" + key, [], Input)}</p>\r\n                </div>\r\n            })}\r\n        </div>\r\n        {error && <div className={s.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <button className={s.editProfileBtn}>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                Save\r\n            </button>\r\n            <button type=\"button\" className={s.editProfileBtn, s.editProfileBtnCancel} onClick={offEditMode}>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                Cancel\r\n            </button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: \"edit-profile\" })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import s from './ProfileInfo.module.css';\r\nimport userPhoto from \"../../../assets/images/empty.png\";\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport { useState } from 'react';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.avatar}>\r\n                <div className={s.main}>\r\n                    <div className={s.profilePhoto}>\r\n                        <img src={props.profile.photos.large || userPhoto} alt=\"\" />\r\n                        {props.isOwner && <label htmlFor=\"file-upload\" className={s.chooseFile}>\r\n                            Change ava\r\n                        </label>}\r\n                    </div>\r\n                    <input className={s.chooseBase} onChange={onMainPhotoSelected} id={\"file-upload\"} type=\"file\" />\r\n                    <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit} offEditMode={() => { setEditMode(false) }} />\r\n                    : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={props.profile} isOwner={props.isOwner} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n    return <div className={s.info}>\r\n        <div className={s.infoBlock}>\r\n            <p className={s.title}>Infoâ˜»</p>\r\n            <p>Name: <span>{profile.fullName}</span></p>\r\n            <p>About: <span>{profile.aboutMe}</span></p>\r\n            <p>Job: <span>{profile.lookingForAJob === true ? \"Ð˜Ñ‰ÐµÑ‚ Ñ€Ð°Ð±Ð¾Ñ‚Ñƒ\" : \"Ð Ð°Ð±Ð¾Ñ‚Ð°ÐµÑ‚ Ð³Ð´Ðµ-Ñ‚Ð¾\"}</span></p>\r\n            <p>Job description: <span>{profile.lookingForAJobDescription}</span></p>\r\n        </div>\r\n        <div>\r\n            <p className={s.title}>Contactsâ˜»</p>{Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n            })}\r\n        </div>\r\n        {isOwner && <div>\r\n            <button className={s.editProfileBtn} onClick={goToEditMode}>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                Edit my profile\r\n            </button>\r\n        </div>}\r\n    </div>\r\n}\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n    return <p className={s.contacts}>{contactTitle}: <span>{contactValue}</span></p>\r\n}\r\n\r\nexport default ProfileInfo;","import s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://www.kinonews.ru/insimgs/2021/newsimg/newsimg98663.jpg\"/> {props.message}\r\n            <div>\r\n                <span>Likes <b>{props.likeCount}</b></span>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Post;"," import React from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../../support/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls.js\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\n\r\nconst MyPosts = React.memo((props) => {\r\n\r\n  let postsElements = props.posts.map((p) => (\r\n    <Post key={p.id} message={p.post} likeCount={p.likesCount} />\r\n  ));\r\n\r\n\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostBody)\r\n  };\r\n\r\n  return (\r\n    <div className={s.myPosts}>\r\n      <h2>My posts</h2>\r\n      <AddNewPostForm onSubmit={onAddPost} />\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\nconst AddNewPost = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit} className={s.myPost}>\r\n      <Field name=\"newPostBody\" component={Textarea} placeholder={\"Post message\"} className={s.textarea} validate={[required, maxLength30]} />\r\n      <button>Add post</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst AddNewPostForm = reduxForm({\r\n  form: \"newpost\"\r\n})(AddNewPost)\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostBody) => {\r\n            dispatch(addPostActionCreator(newPostBody));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo saveProfile={props.saveProfile} savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from \"react-redux\";\r\nimport { setUserProfile, putUserId, getStatus, updateStatus, savePhoto, saveProfile } from \"../../redux/profile-reducer\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.loggedUserId;\r\n        }\r\n        this.props.putUserId(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} \r\n            saveProfile={this.props.saveProfile}\r\n            isOwner={!this.props.match.params.userId} \r\n            profile={this.props.profile} \r\n            status={this.props.status} \r\n            updateStatus={this.props.updateStatus} \r\n            savePhoto={this.props.savePhoto}  \r\n             />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    loggedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default\r\n    compose(\r\n        connect(mapStateToProps, { setUserProfile, putUserId, getStatus, updateStatus, savePhoto, saveProfile }),\r\n        withRouter,\r\n        withAuthRedirect\r\n    )(ProfileContainer)"],"sourceRoot":""}